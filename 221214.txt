Java Virtual Machine 
.class 파일을 JRE를 통해 실행하면 컴퓨터가 이해할 수 있도록 소스코드를 변환해줌
JVM은 운영체제에 종속적이고 .class파일은 독립적이므로 각 운영체제에 맞는 JVM이 설치되어있다면 소스코드 1가지로 여러 운영체제에 사용가능하다 

java.exe는 Java 언어로 작성되어 컴파일된 .class를 실행할때 필요한 JRE이다.
javac.exe는 Java 언어로 작성된 .java 파일을 .class로 컴파일 해주는 컴파일러 프로그램이다.


2. 변수와 타입

변수 -하나의 값을 저장할 수 있는 메모리 공간

변수 선언

int a, b, c;
double d;
String e="Star";
char f='y';

첫번째 글자는 문자이거나 $, _ 이어야하고 숫자를 사용할 수 없고 대문자를 사용 할 수 없다.
길이의 제한은 없으며 자바 예약어를 사용할 수는 없다.

기본 데이터 타입 : boolean, byte, char, short, int, long, float, double
접근 지정자 : private, protected, public
클래스와 관련된 것 : class , abstract, interface, extends, implements, enum
객체와 관련된 것 : new, instanceof, this, super, null
메소드와 관련된 것 : void, return
제어문과 관련된 것 : if, else, switch, case, default, for, do, while, break, continue
논리값 : true, false
예외 처리와 관련된것 : try, catch, finally, throw, throws
기타 : transient, volatile, package, import, synchronized, native, final, static, strictfp, assert

리터럴 : 소스코드내에서 직접 변수 초기값으로 입력된 값

정수 리터럴 
소수점이 없는 정수 리터럴 = 10진수
0으로 시작하는 정수 리터럴 = 8진수
0x, 0X로 시작하는 정수 리터럴 = 16진수

실수 리터럴
소수점 혹은 E,e가 있는 리터럴 = 10진수 실수

문자 리터럴
작은 따옴표(')로 묶인 텍스트

이스케이프 문자
\-역슬래시
'\t' 수평탭
'\n' 줄 바꿈
'\r' 리턴
'\"' 큰따옴표
'\'' 작은따옴표
'\\' 역슬래시
'\u(16진수)'16진수에 해당하는 유니코드

문자열 리터럴
큰 따옴표(")로 묶인 텍스트

논리 리터럴
true, false


변수는 선언된 블록 내에서만 사용가능하다.

예시
public static void main(String[] args) {
int var1;

if (...) {
   int var2;
 //이 블록 내에서는 var1,2 사용가능
}

for (...) {
  int var3;
 //이 블록 내에서는 var1,3 사용가능
}
//이 블록 내에서는 var1만 사용가능
}


데이터 타입
정수
기본타입 /메모리 사용 크기/ 저장되는 값의 범위
byte/ 1byte = 8bit/ -2^7~(2^7-1) = -128~127
char/ 2byte= 16bit/ 0~2^16-1 = 유니코드:\u0000~\uFFFF,0~65535
short/  2byte= 16bit/ -2^15~(2^15-1)(-32,768~32.767)
int/4byte=32bit/-2^31~(2^31-1)(-2,147,483,648~2,147,483,648
long/8byte=64bit/-2^63~(2^63-1)
실수
float/4byte=32bit/(+/-)1.4E-45~(+/-)3.4028235E38
double/8byte=64bit/(+/-)4.9E-324~(+/-)1.7976931348623157E308
논리
boolean/1byte = 8bit/ true, false

2진수 보수 개념
총 8비트를 사용하는 2진수는 맨앞자리가 1인경우
-값으로 보수계산을 해야함
11111110 >보수 0000001 +1 >(-)2
11111111 = -1

저장되는 값의 범위를 벗어난 값이 지정되면 오류가 뜨는것이 아닌 쓰레기값이 저장됨
예)byte a=128;   System.out.println(a)  --> -127

char 타입 변수에는
char a1= 'A';
char a2= 65;
char a3= '\u0041';
이렇게 문자를 직접 넣거나 숫자 값을 넣거나 유니코드를 직접넣을 수 있다.
출력시엔 매칭되는 문자가 출력 되며
int a4 = a1 or a2 or a3;를 통해 대응되는 숫자값을 얻을 수 있다
char a5 =''; 는 에러가 발생함 공백한칸을 넣어야함

자동 타입변환
byte > int >double
char > int
byte > char 안됨 byte는 -값이 있지만 char는 없기때문

연산시에 byte byte 더하면 int로 변환됨

강제 타입변환
byte = (byte)int값 이런식으로 강제 타입변환이 가능하나 손실없게 주의해야함
